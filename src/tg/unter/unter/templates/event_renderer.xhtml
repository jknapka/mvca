<py:def function="renderEvent(ev,user,complete=0,renderHeader=False,viewedUser=None,brief=False)">
<!--
   ev is a wrapped event, with an ev.ev member referencing the
	original NeedEvent object.

	user is the logged-in user, a model.User object.

	complete is the value of ev.ev.complete for events we want
	to render. This is an int since we don't store booleans
	in the DB.

	If renderHeader is True, render a header row appropriate
	for the logged-in user, rather than rendering ev
	(which should be None).

	If brief is True, the event will be rendered without
	notes as a single table row. Otherwise, it will be
	rendered as two rows, notes taking all the second row,
	with a thicker border around the event.

	If the user whose associated events are being viewed is
	not the same as the logged-in user, viewedUser will
	be a reference to the model.User object for the user
	being viewed. Normally in this case the logged-in user
	is a coordinator or administrator.
-->
<?python
import time
if viewedUser is None:
	viewedUser = user
isViewedUser = (user.user_id == viewedUser.user_id)
perms = [p.permission_name for p in user.permissions]
complete = (complete == 1)
isCoordinator = ('manage_events' in perms)
isVolunteer = ('respond_to_need' in perms)
respondents = []
if ev is not None:
    respondents = [vr.user.user_id for vr in ev.ev.responses]
isRespondent = (user.user_id in respondents)
?>
	<tr py:if="renderHeader"
		style="border-bottom: 5px solid black">
		<th>Created by</th>
		<th>Date</th>
		<th>Time</th>
		<th>Type</th>
		<th>Estimated duration</th>
		<th>Location</th>
		<th>Affected persons</th>
		<th>Volunteers needed</th>
		<th>Volunteers responding</th>
		<th>Last alert</th>
		<th py:if="isCoordinator">Completed?</th>
		<th py:if="isVolunteer and not complete">
			Respond
		</th>
		<th py:if="isCoordinator">
			Cancel this event
		</th>
	</tr>
	<tr py:if="not renderHeader"
		id="nev-div-${ev.ev.neid}"
	 	class="unter-need-event-row"
	    style="border-left: 1px solid black; border-bottom: 1px solid black">
		<td id="created-by-${ev.ev.neid}" >${ev.ev.created_by.display_name}</td>
		<td id="date-${ev.ev.neid}" ><a href="/event_details?neid=${ev.ev.neid}">
			${ev.date_str}
			</a>
		</td>
		<td id="time-ev-${ev.ev.neid}">${ev.time_str}</td>
		<td id="type-ev-${ev.ev.neid}">${ev.ev_str}</td>
		<td id="duration-ev-${ev.ev.neid}">${ev.ev.duration}</td>
		<td id="location-ev-${ev.ev.neid}">${ev.ev.location}</td>
		<td id="affected-persons-ev-${ev.ev.neid}">${ev.ev.affected_persons}</td>
		<td id="volunteer-count-ev-${ev.ev.neid}">${ev.ev.volunteer_count}</td>
		<td id="responses-ev-${ev.ev.neid}">${len(ev.ev.responses)}
			<ul py:if="len(ev.ev.responses)>0">
				<li py:for="vr in ev.ev.responses">
					<a href="${tg.url('/volunteer_info',dict(user_id=vr.user.user_id))}">
						${vr.user.display_name}
					</a>
				</li>
			</ul>
		</td>
		<td id="alert-time-ev-${ev.ev.neid}">${ev.last_alert_time}
			<a py:if="isCoordinator and (not complete) and time.time() - 3600 > ev.ev.last_alert_time"
				   href="/send_alert?neid=${ev.ev.neid}"><br/>Send alert</a>
		</td>
		<td py:if="isCoordinator" id="complete-ev-${ev.ev.neid}"><a py:if="not complete"
				href="/event_complete?neid=${ev.ev.neid}">Mark complete</a>
			<span py:if="complete">Already complete</span>
		</td>
		<td py:if="isVolunteer and (not complete) and isViewedUser" id="respond-ev-${ev.ev.neid}">
			<ul>
				<li><a href="/respond?neid=${ev.ev.neid}">Commit to serve</a>
				</li>
				<li><a href="/decommit?neid=${ev.ev.neid}">Sorry, can't make it</a>
				</li>
			</ul>
		</td>
		<td py:if="isCoordinator" id="cancel-ev-${ev.ev.neid}">
			<a href="/cancel?neid=${ev.ev.neid}">Cancel</a>
		</td>
		</tr>
		<tr py:if="not renderHeader and not brief"
			border="1"
		    style="border-bottom:3px solid black; border-left:1px solid black">
		<td border="0"></td>
		<td colspan="100" id="notes-ev-${ev.ev.neid}">${ev.ev.notes}</td>
	</tr>

</py:def>

